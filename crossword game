import java.io.*;
import java.util.*;

public class Solution {

    public static boolean searchRow(char[][] matrix, int x, String str) {
        // searching in xth row
        int n = matrix.length;
        for ( int i = 0 ; i < n ; i++ ) {
            int str_itr = 0, row_itr = i;
            while ( str_itr<str.length()   &&   row_itr<n   &&    matrix[x][row_itr] == str.charAt(str_itr) ) {
                row_itr++;
                str_itr++;
            }
            if ( str_itr == str.length() ) {
                return true;
            }
        }
        return false;
    }
    
    public static boolean searchCol(char[][] matrix, int x, String str) {
        int n = matrix.length;
        for ( int i = 0 ; i < n ; i++ ) {            
            int str_itr = 0, col_itr = i;
            while ( str_itr<str.length()   &&   col_itr<n   &&    matrix[col_itr][x] == str.charAt(str_itr) ) {
                col_itr++;
                str_itr++;
            }
            
            if ( str_itr == str.length() ) {
                return true;
            }
        }
        return false;
    }
    
    public static boolean searchDiagonals(char[][] arr, String s) {
        
        int n = arr.length;
        
        for(int i = 0 ; i <= n - s.length() ; i++){
            for(int j = 0 ; j < n - s.length() ; j++){
                int count = 0;
                if(s.charAt(0) == arr[i][j]){
                    count++;
                    for(int x = 1 ; x < s.length() ; x++){
                        if(arr[i+x][j+x] == s.charAt(x)){
                            count++;
                        }
                    }
                    if( count == s.length()){
                        return true;
                    }
                }
            }
        }
        
        for(int i = 0 ; i <= n - s.length() ; i++){
            for(int j = n-1 ; j >=  s.length() ; j--){
                int count = 0;
                if(s.charAt(0) == arr[i][j]){
                    count++;
                    for(int x = 1 ; x < s.length() ; x++){
                        if(arr[i+x][j-x] == s.charAt(x)){
                            count++;
                        }
                    }
                    if( count == s.length()){
                        return true;
                    }
                }
            }
        }
        
        return false;
    }

    
    public static boolean gridContains(char[][] matrix, String str) {
        
        int n = matrix.length;
        for ( int i = 0 ; i < n ; i++ ) {
            if ( searchRow(matrix,i,str) ) {
                return true;
            }
        }
        
        for ( int i = 0 ; i < n ; i++ ) {
            if ( searchCol(matrix,i,str) ) {
                return true;
            }
        }
        
        for( int i = 0 ; i < n ; i++  )
        if (searchDiagonals(matrix,str)) {
            return true;
        }
        return false;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        char[][] grid = new char[n][n];
        for ( int i = 0 ; i < n ; i++ ) {
            for ( int j = 0 ; j < n ; j++ ) {
                grid[i][j] = sc.next().charAt(0);
            }
        }
        String str = sc.next();
        System.out.println(gridContains(grid,str));
        
    }
}
